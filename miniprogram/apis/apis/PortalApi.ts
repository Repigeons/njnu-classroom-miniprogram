/* tslint:disable */
/* eslint-disable */
/**
 * 南师教室
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LoginVo,
    LoginVoFromJSON,
    LoginVoToJSON,
    NoticeVo,
    NoticeVoFromJSON,
    NoticeVoToJSON,
    SimpleDataVoBoolean,
    SimpleDataVoBooleanFromJSON,
    SimpleDataVoBooleanToJSON,
    } from '../models/index';

export interface LoginRequest {
    code: string;
    }

export interface PutNoticeRequest {
    text: string;
    }

export interface SetNoticeRequest {
    id: string;
    }

export interface SetServiceSwitchRequest {
    value: boolean;
    }

export interface Token2openidRequest {
    authorization: string;
    }

/**
 * 
 */
export class PortalApi extends runtime.BaseAPI {

    /**
     * 查询公告
     */
    async getNoticeRaw(): Promise<runtime.ApiResponse<NoticeVo>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/notice`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoticeVoFromJSON(jsonValue));
    }

    /**
     * 查询公告
     */
    async getNotice(): Promise<NoticeVo> {
        const response = await this.getNoticeRaw();
        return await response.value();
    }

    /**
     * 获取服务开关
     */
    async getServiceSwitchRaw(): Promise<runtime.ApiResponse<SimpleDataVoBoolean>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/serviceSwitch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleDataVoBooleanFromJSON(jsonValue));
    }

    /**
     * 获取服务开关
     */
    async getServiceSwitch(): Promise<SimpleDataVoBoolean> {
        const response = await this.getServiceSwitchRaw();
        return await response.value();
    }

    /**
     * 用户登录
     */
    async loginRaw(requestParameters: LoginRequest): Promise<runtime.ApiResponse<LoginVo>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling login.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/sso/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginVoFromJSON(jsonValue));
    }

    /**
     * 用户登录
     */
    async login(code: string): Promise<LoginVo> {
        const response = await this.loginRaw({ code: code });
        return await response.value();
    }

    /**
     * 发布新公告
     */
    async putNoticeRaw(requestParameters: PutNoticeRequest): Promise<runtime.ApiResponse<NoticeVo>> {
        if (requestParameters.text === null || requestParameters.text === undefined) {
            throw new runtime.RequiredError('text','Required parameter requestParameters.text was null or undefined when calling putNotice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/notice`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoticeVoFromJSON(jsonValue));
    }

    /**
     * 发布新公告
     */
    async putNotice(text: string): Promise<NoticeVo> {
        const response = await this.putNoticeRaw({ text: text });
        return await response.value();
    }

    /**
     * 设置公告
     */
    async setNoticeRaw(requestParameters: SetNoticeRequest): Promise<runtime.ApiResponse<NoticeVo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling setNotice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/notice`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoticeVoFromJSON(jsonValue));
    }

    /**
     * 设置公告
     */
    async setNotice(id: string): Promise<NoticeVo> {
        const response = await this.setNoticeRaw({ id: id });
        return await response.value();
    }

    /**
     * 设置服务开关
     */
    async setServiceSwitchRaw(requestParameters: SetServiceSwitchRequest): Promise<runtime.ApiResponse<SimpleDataVoBoolean>> {
        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling setServiceSwitch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.value !== undefined) {
            queryParameters['value'] = requestParameters.value;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/serviceSwitch`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleDataVoBooleanFromJSON(jsonValue));
    }

    /**
     * 设置服务开关
     */
    async setServiceSwitch(value: boolean): Promise<SimpleDataVoBoolean> {
        const response = await this.setServiceSwitchRaw({ value: value });
        return await response.value();
    }

    /**
     * 获取openid
     */
    async token2openidRaw(requestParameters: Token2openidRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling token2openid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/sso/openid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * 获取openid
     */
    async token2openid(authorization: string): Promise<string> {
        const response = await this.token2openidRaw({ authorization: authorization });
        return await response.value();
    }

}
