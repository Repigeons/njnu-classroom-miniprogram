/* tslint:disable */
/* eslint-disable */
/**
 * 南师教室
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ClassroomVo,
    ClassroomVoFromJSON,
    ClassroomVoToJSON,
    EmptyClassroomFeedbackDto,
    EmptyClassroomFeedbackDtoFromJSON,
    EmptyClassroomFeedbackDtoToJSON,
    EmptyClassroomVo,
    EmptyClassroomVoFromJSON,
    EmptyClassroomVoToJSON,
    PageableResultTimetableVo,
    PageableResultTimetableVoFromJSON,
    PageableResultTimetableVoToJSON,
    PositionVo,
    PositionVoFromJSON,
    PositionVoToJSON,
    TimetableVo,
    TimetableVoFromJSON,
    TimetableVoToJSON,
    } from '../models/index';

export interface FeedbackEmptyClassroomRequest {
    emptyClassroomFeedbackDto?: EmptyClassroomFeedbackDto;
    }

export interface GetEmptyRequest {
    jxlmc: string;
    weekday: string;
    jc: string;
    }

export interface GetOverviewRequest {
    jasdm: string;
    }

export interface GetSearchRequest {
    ksjc: number;
    jsjc: number;
    jxlmc: string;
    zylxdm: string;
    keyword: string;
    weekday?: GetSearchWeekdayEnum;
    page?: number;
    size?: number;
    }

/**
 * 
 */
export class CoreApi extends runtime.BaseAPI {

    /**
     * 空教室异常反馈
     */
    async feedbackEmptyClassroomRaw(requestParameters: FeedbackEmptyClassroomRequest): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/api/emptyClassroom/feedback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmptyClassroomFeedbackDtoToJSON(requestParameters.emptyClassroomFeedbackDto),

        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 空教室异常反馈
     */
    async feedbackEmptyClassroom(emptyClassroomFeedbackDto?: EmptyClassroomFeedbackDto): Promise<object> {
        const response = await this.feedbackEmptyClassroomRaw({ emptyClassroomFeedbackDto: emptyClassroomFeedbackDto });
        return await response.value();
    }

    /**
     * 刷新缓存
     */
    async flushCacheRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/api/flushCache`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 刷新缓存
     */
    async flushCache(): Promise<object> {
        const response = await this.flushCacheRaw();
        return await response.value();
    }

    /**
     * 刷新教室列表
     */
    async flushClassroomsRaw(): Promise<runtime.ApiResponse<Array<ClassroomVo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/api/classrooms/flush`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassroomVoFromJSON));
    }

    /**
     * 刷新教室列表
     */
    async flushClassrooms(): Promise<Array<ClassroomVo>> {
        const response = await this.flushClassroomsRaw();
        return await response.value();
    }

    /**
     * 教室列表
     */
    async getClassroomListRaw(): Promise<runtime.ApiResponse<Array<ClassroomVo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/query/classrooms.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassroomVoFromJSON));
    }

    /**
     * 教室列表
     */
    async getClassroomList(): Promise<Array<ClassroomVo>> {
        console.warn(this)
        const response = await this.getClassroomListRaw();
        return await response.value();
    }

    /**
     * 空教室列表
     */
    async getEmptyRaw(requestParameters: GetEmptyRequest): Promise<runtime.ApiResponse<Array<EmptyClassroomVo>>> {
        if (requestParameters.jxlmc === null || requestParameters.jxlmc === undefined) {
            throw new runtime.RequiredError('jxlmc','Required parameter requestParameters.jxlmc was null or undefined when calling getEmpty.');
        }

        if (requestParameters.weekday === null || requestParameters.weekday === undefined) {
            throw new runtime.RequiredError('weekday','Required parameter requestParameters.weekday was null or undefined when calling getEmpty.');
        }

        if (requestParameters.jc === null || requestParameters.jc === undefined) {
            throw new runtime.RequiredError('jc','Required parameter requestParameters.jc was null or undefined when calling getEmpty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.jxlmc !== undefined) {
            queryParameters['jxlmc'] = requestParameters.jxlmc;
        }

        if (requestParameters.weekday !== undefined) {
            queryParameters['weekday'] = requestParameters.weekday;
        }

        if (requestParameters.jc !== undefined) {
            queryParameters['jc'] = requestParameters.jc;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/query/emptyClassroom`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmptyClassroomVoFromJSON));
    }

    /**
     * 空教室列表
     */
    async getEmpty(jxlmc: string, weekday: string, jc: string): Promise<Array<EmptyClassroomVo>> {
        const response = await this.getEmptyRaw({ jxlmc: jxlmc, weekday: weekday, jc: jc });
        return await response.value();
    }

    /**
     * 教学楼位置
     */
    async getJxlPositionRaw(): Promise<runtime.ApiResponse<Array<PositionVo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/query/buildings.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PositionVoFromJSON));
    }

    /**
     * 教学楼位置
     */
    async getJxlPosition(): Promise<Array<PositionVo>> {
        const response = await this.getJxlPositionRaw();
        return await response.value();
    }

    /**
     * 教室概览
     */
    async getOverviewRaw(requestParameters: GetOverviewRequest): Promise<runtime.ApiResponse<Array<TimetableVo>>> {
        if (requestParameters.jasdm === null || requestParameters.jasdm === undefined) {
            throw new runtime.RequiredError('jasdm','Required parameter requestParameters.jasdm was null or undefined when calling getOverview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.jasdm !== undefined) {
            queryParameters['jasdm'] = requestParameters.jasdm;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/query/overview`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimetableVoFromJSON));
    }

    /**
     * 教室概览
     */
    async getOverview(jasdm: string): Promise<Array<TimetableVo>> {
        const response = await this.getOverviewRaw({ jasdm: jasdm });
        return await response.value();
    }

    /**
     * 更多搜索
     */
    async getSearchRaw(requestParameters: GetSearchRequest): Promise<runtime.ApiResponse<PageableResultTimetableVo>> {
        if (requestParameters.ksjc === null || requestParameters.ksjc === undefined) {
            throw new runtime.RequiredError('ksjc','Required parameter requestParameters.ksjc was null or undefined when calling getSearch.');
        }

        if (requestParameters.jsjc === null || requestParameters.jsjc === undefined) {
            throw new runtime.RequiredError('jsjc','Required parameter requestParameters.jsjc was null or undefined when calling getSearch.');
        }

        if (requestParameters.jxlmc === null || requestParameters.jxlmc === undefined) {
            throw new runtime.RequiredError('jxlmc','Required parameter requestParameters.jxlmc was null or undefined when calling getSearch.');
        }

        if (requestParameters.zylxdm === null || requestParameters.zylxdm === undefined) {
            throw new runtime.RequiredError('zylxdm','Required parameter requestParameters.zylxdm was null or undefined when calling getSearch.');
        }

        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling getSearch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.weekday !== undefined) {
            queryParameters['weekday'] = requestParameters.weekday;
        }

        if (requestParameters.ksjc !== undefined) {
            queryParameters['ksjc'] = requestParameters.ksjc;
        }

        if (requestParameters.jsjc !== undefined) {
            queryParameters['jsjc'] = requestParameters.jsjc;
        }

        if (requestParameters.jxlmc !== undefined) {
            queryParameters['jxlmc'] = requestParameters.jxlmc;
        }

        if (requestParameters.zylxdm !== undefined) {
            queryParameters['zylxdm'] = requestParameters.zylxdm;
        }

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/query/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageableResultTimetableVoFromJSON(jsonValue));
    }

    /**
     * 更多搜索
     */
    async getSearch(ksjc: number, jsjc: number, jxlmc: string, zylxdm: string, keyword: string, weekday?: GetSearchWeekdayEnum, page?: number, size?: number): Promise<PageableResultTimetableVo> {
        const response = await this.getSearchRaw({ ksjc: ksjc, jsjc: jsjc, jxlmc: jxlmc, zylxdm: zylxdm, keyword: keyword, weekday: weekday, page: page, size: size });
        return await response.value();
    }

    /**
     * 资源类型代码
     */
    async getZylxdmRaw(): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/query/zylxdm.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 资源类型代码
     */
    async getZylxdm(): Promise<Array<object>> {
        const response = await this.getZylxdmRaw();
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetSearchWeekdayEnum {
    MON = 'MON',
    TUE = 'TUE',
    WED = 'WED',
    THU = 'THU',
    FRI = 'FRI',
    SAT = 'SAT',
    SUN = 'SUN'
}
