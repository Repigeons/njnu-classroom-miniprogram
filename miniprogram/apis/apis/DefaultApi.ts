/* tslint:disable */
/* eslint-disable */
/**
 * 南师教室
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ClassroomVo,
    ClassroomVoFromJSON,
    ClassroomVoToJSON,
    EmptyClassroomFeedbackDto,
    EmptyClassroomFeedbackDtoFromJSON,
    EmptyClassroomFeedbackDtoToJSON,
    EmptyClassroomVo,
    EmptyClassroomVoFromJSON,
    EmptyClassroomVoToJSON,
    GridVo,
    GridVoFromJSON,
    GridVoToJSON,
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    LoginVo,
    LoginVoFromJSON,
    LoginVoToJSON,
    NoticeVo,
    NoticeVoFromJSON,
    NoticeVoToJSON,
    PageableResultTimetableVo,
    PageableResultTimetableVoFromJSON,
    PageableResultTimetableVoToJSON,
    PositionVo,
    PositionVoFromJSON,
    PositionVoToJSON,
    ShuttleRouteVo,
    ShuttleRouteVoFromJSON,
    ShuttleRouteVoToJSON,
    SimpleDataVoBoolean,
    SimpleDataVoBooleanFromJSON,
    SimpleDataVoBooleanToJSON,
    SimpleDataVoLong,
    SimpleDataVoLongFromJSON,
    SimpleDataVoLongToJSON,
    TimetableVo,
    TimetableVoFromJSON,
    TimetableVoToJSON,
    UserFavoritesDto,
    UserFavoritesDtoFromJSON,
    UserFavoritesDtoToJSON,
    UserFavoritesVo,
    UserFavoritesVoFromJSON,
    UserFavoritesVoToJSON,
    } from '../models';

export interface DeleteFavoritesRequest {
    id: string;
    }

export interface FeedbackEmptyClassroomRequest {
    emptyClassroomFeedbackDto?: EmptyClassroomFeedbackDto;
    }

export interface GetEmptyRequest {
    jxlmc: string;
    weekday: string;
    jc: string;
    }

export interface GetOverviewRequest {
    jasdm: string;
    }

export interface GetSearchRequest {
    ksjc: number;
    jsjc: number;
    jxlmc: string;
    zylxdm: string;
    keyword: string;
    weekday?: GetSearchWeekdayEnum;
    page?: number;
    size?: number;
    }

export interface GetShuttleRequest {
    weekday: GetShuttleWeekdayEnum;
    }

export interface LoginRequest {
    code: string;
    }

export interface PutNoticeRequest {
    text: string;
    }

export interface SaveFavoritesRequest {
    userFavoritesDto?: UserFavoritesDto;
    }

export interface SetNoticeRequest {
    id: string;
    }

export interface SetServiceSwitchRequest {
    value: boolean;
    }

export interface Token2openidRequest {
    authorization: string;
    }

export interface UploadShuttleImageRequest {
    inlineObject?: InlineObject;
    }

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 删除用户收藏
     */
    async deleteFavoritesRaw(requestParameters: DeleteFavoritesRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFavorites.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/user/favorites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 删除用户收藏
     */
    async deleteFavorites(id: string): Promise<object> {
        const response = await this.deleteFavoritesRaw({ id: id });
        return await response.value();
    }

    /**
     * 空教室异常反馈
     */
    async feedbackEmptyClassroomRaw(requestParameters: FeedbackEmptyClassroomRequest): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/api/emptyClassroom/feedback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmptyClassroomFeedbackDtoToJSON(requestParameters.emptyClassroomFeedbackDto),

        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 空教室异常反馈
     */
    async feedbackEmptyClassroom(emptyClassroomFeedbackDto?: EmptyClassroomFeedbackDto): Promise<object> {
        const response = await this.feedbackEmptyClassroomRaw({ emptyClassroomFeedbackDto: emptyClassroomFeedbackDto });
        return await response.value();
    }

    /**
     * 刷新缓存
     */
    async flushCacheRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/api/flushCache`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 刷新缓存
     */
    async flushCache(): Promise<object> {
        const response = await this.flushCacheRaw();
        return await response.value();
    }

    /**
     * 刷新教室列表
     */
    async flushClassroomsRaw(): Promise<runtime.ApiResponse<Array<ClassroomVo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/api/classrooms/flush`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassroomVoFromJSON));
    }

    /**
     * 刷新教室列表
     */
    async flushClassrooms(): Promise<Array<ClassroomVo>> {
        const response = await this.flushClassroomsRaw();
        return await response.value();
    }

    /**
     * 刷新发现栏
     */
    async flushGridsRaw(): Promise<runtime.ApiResponse<Array<GridVo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/grids/flush`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GridVoFromJSON));
    }

    /**
     * 刷新发现栏
     */
    async flushGrids(): Promise<Array<GridVo>> {
        const response = await this.flushGridsRaw();
        return await response.value();
    }

    /**
     * 教室列表
     */
    async getClassroomListRaw(): Promise<runtime.ApiResponse<Array<ClassroomVo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/query/classrooms.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassroomVoFromJSON));
    }

    /**
     * 教室列表
     */
    async getClassroomList(): Promise<Array<ClassroomVo>> {
        const response = await this.getClassroomListRaw();
        return await response.value();
    }

    /**
     * 空教室列表
     */
    async getEmptyRaw(requestParameters: GetEmptyRequest): Promise<runtime.ApiResponse<Array<EmptyClassroomVo>>> {
        if (requestParameters.jxlmc === null || requestParameters.jxlmc === undefined) {
            throw new runtime.RequiredError('jxlmc','Required parameter requestParameters.jxlmc was null or undefined when calling getEmpty.');
        }

        if (requestParameters.weekday === null || requestParameters.weekday === undefined) {
            throw new runtime.RequiredError('weekday','Required parameter requestParameters.weekday was null or undefined when calling getEmpty.');
        }

        if (requestParameters.jc === null || requestParameters.jc === undefined) {
            throw new runtime.RequiredError('jc','Required parameter requestParameters.jc was null or undefined when calling getEmpty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.jxlmc !== undefined) {
            queryParameters['jxlmc'] = requestParameters.jxlmc;
        }

        if (requestParameters.weekday !== undefined) {
            queryParameters['weekday'] = requestParameters.weekday;
        }

        if (requestParameters.jc !== undefined) {
            queryParameters['jc'] = requestParameters.jc;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/query/emptyClassroom`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmptyClassroomVoFromJSON));
    }

    /**
     * 空教室列表
     */
    async getEmpty(jxlmc: string, weekday: string, jc: string): Promise<Array<EmptyClassroomVo>> {
        const response = await this.getEmptyRaw({ jxlmc: jxlmc, weekday: weekday, jc: jc });
        return await response.value();
    }

    /**
     * 查询用户收藏
     */
    async getFavoritesRaw(): Promise<runtime.ApiResponse<Array<UserFavoritesVo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/user/favorites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFavoritesVoFromJSON));
    }

    /**
     * 查询用户收藏
     */
    async getFavorites(): Promise<Array<UserFavoritesVo>> {
        const response = await this.getFavoritesRaw();
        return await response.value();
    }

    /**
     * 发现栏
     */
    async getGridsRaw(): Promise<runtime.ApiResponse<Array<GridVo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/grids.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GridVoFromJSON));
    }

    /**
     * 发现栏
     */
    async getGrids(): Promise<Array<GridVo>> {
        const response = await this.getGridsRaw();
        return await response.value();
    }

    /**
     * 教学楼位置
     */
    async getJxlPositionRaw(): Promise<runtime.ApiResponse<Array<PositionVo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/query/buildings.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PositionVoFromJSON));
    }

    /**
     * 教学楼位置
     */
    async getJxlPosition(): Promise<Array<PositionVo>> {
        const response = await this.getJxlPositionRaw();
        return await response.value();
    }

    /**
     * 查询公告
     */
    async getNoticeRaw(): Promise<runtime.ApiResponse<NoticeVo>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/notice`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoticeVoFromJSON(jsonValue));
    }

    /**
     * 查询公告
     */
    async getNotice(): Promise<NoticeVo> {
        const response = await this.getNoticeRaw();
        return await response.value();
    }

    /**
     * 教室概览
     */
    async getOverviewRaw(requestParameters: GetOverviewRequest): Promise<runtime.ApiResponse<Array<TimetableVo>>> {
        if (requestParameters.jasdm === null || requestParameters.jasdm === undefined) {
            throw new runtime.RequiredError('jasdm','Required parameter requestParameters.jasdm was null or undefined when calling getOverview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.jasdm !== undefined) {
            queryParameters['jasdm'] = requestParameters.jasdm;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/query/overview`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimetableVoFromJSON));
    }

    /**
     * 教室概览
     */
    async getOverview(jasdm: string): Promise<Array<TimetableVo>> {
        const response = await this.getOverviewRaw({ jasdm: jasdm });
        return await response.value();
    }

    /**
     * 更多搜索
     */
    async getSearchRaw(requestParameters: GetSearchRequest): Promise<runtime.ApiResponse<PageableResultTimetableVo>> {
        if (requestParameters.ksjc === null || requestParameters.ksjc === undefined) {
            throw new runtime.RequiredError('ksjc','Required parameter requestParameters.ksjc was null or undefined when calling getSearch.');
        }

        if (requestParameters.jsjc === null || requestParameters.jsjc === undefined) {
            throw new runtime.RequiredError('jsjc','Required parameter requestParameters.jsjc was null or undefined when calling getSearch.');
        }

        if (requestParameters.jxlmc === null || requestParameters.jxlmc === undefined) {
            throw new runtime.RequiredError('jxlmc','Required parameter requestParameters.jxlmc was null or undefined when calling getSearch.');
        }

        if (requestParameters.zylxdm === null || requestParameters.zylxdm === undefined) {
            throw new runtime.RequiredError('zylxdm','Required parameter requestParameters.zylxdm was null or undefined when calling getSearch.');
        }

        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling getSearch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.weekday !== undefined) {
            queryParameters['weekday'] = requestParameters.weekday;
        }

        if (requestParameters.ksjc !== undefined) {
            queryParameters['ksjc'] = requestParameters.ksjc;
        }

        if (requestParameters.jsjc !== undefined) {
            queryParameters['jsjc'] = requestParameters.jsjc;
        }

        if (requestParameters.jxlmc !== undefined) {
            queryParameters['jxlmc'] = requestParameters.jxlmc;
        }

        if (requestParameters.zylxdm !== undefined) {
            queryParameters['zylxdm'] = requestParameters.zylxdm;
        }

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/query/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageableResultTimetableVoFromJSON(jsonValue));
    }

    /**
     * 更多搜索
     */
    async getSearch(ksjc: number, jsjc: number, jxlmc: string, zylxdm: string, keyword: string, weekday?: GetSearchWeekdayEnum, page?: number, size?: number): Promise<PageableResultTimetableVo> {
        const response = await this.getSearchRaw({ ksjc: ksjc, jsjc: jsjc, jxlmc: jxlmc, zylxdm: zylxdm, keyword: keyword, weekday: weekday, page: page, size: size });
        return await response.value();
    }

    /**
     * 获取服务开关
     */
    async getServiceSwitchRaw(): Promise<runtime.ApiResponse<SimpleDataVoBoolean>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/serviceSwitch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleDataVoBooleanFromJSON(jsonValue));
    }

    /**
     * 获取服务开关
     */
    async getServiceSwitch(): Promise<SimpleDataVoBoolean> {
        const response = await this.getServiceSwitchRaw();
        return await response.value();
    }

    /**
     * 查询路线
     */
    async getShuttleRaw(requestParameters: GetShuttleRequest): Promise<runtime.ApiResponse<Array<Array<ShuttleRouteVo>>>> {
        if (requestParameters.weekday === null || requestParameters.weekday === undefined) {
            throw new runtime.RequiredError('weekday','Required parameter requestParameters.weekday was null or undefined when calling getShuttle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.weekday !== undefined) {
            queryParameters['weekday'] = requestParameters.weekday;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/shuttle/getRoutes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 查询路线
     */
    async getShuttle(weekday: GetShuttleWeekdayEnum): Promise<Array<Array<ShuttleRouteVo>>> {
        const response = await this.getShuttleRaw({ weekday: weekday });
        return await response.value();
    }

    /**
     * 查询校车站
     */
    async getStationsRaw(): Promise<runtime.ApiResponse<Array<PositionVo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/shuttle/stations.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PositionVoFromJSON));
    }

    /**
     * 查询校车站
     */
    async getStations(): Promise<Array<PositionVo>> {
        const response = await this.getStationsRaw();
        return await response.value();
    }

    /**
     * 资源类型代码
     */
    async getZylxdmRaw(): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/query/zylxdm.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 资源类型代码
     */
    async getZylxdm(): Promise<Array<object>> {
        const response = await this.getZylxdmRaw();
        return await response.value();
    }

    /**
     * 用户登录
     */
    async loginRaw(requestParameters: LoginRequest): Promise<runtime.ApiResponse<LoginVo>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling login.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/sso/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginVoFromJSON(jsonValue));
    }

    /**
     * 用户登录
     */
    async login(code: string): Promise<LoginVo> {
        const response = await this.loginRaw({ code: code });
        return await response.value();
    }

    /**
     * 发布新公告
     */
    async putNoticeRaw(requestParameters: PutNoticeRequest): Promise<runtime.ApiResponse<NoticeVo>> {
        if (requestParameters.text === null || requestParameters.text === undefined) {
            throw new runtime.RequiredError('text','Required parameter requestParameters.text was null or undefined when calling putNotice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/notice`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoticeVoFromJSON(jsonValue));
    }

    /**
     * 发布新公告
     */
    async putNotice(text: string): Promise<NoticeVo> {
        const response = await this.putNoticeRaw({ text: text });
        return await response.value();
    }

    /**
     * 新增用户收藏
     */
    async saveFavoritesRaw(requestParameters: SaveFavoritesRequest): Promise<runtime.ApiResponse<SimpleDataVoLong>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/user/favorites`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserFavoritesDtoToJSON(requestParameters.userFavoritesDto),

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleDataVoLongFromJSON(jsonValue));
    }

    /**
     * 新增用户收藏
     */
    async saveFavorites(userFavoritesDto?: UserFavoritesDto): Promise<SimpleDataVoLong> {
        const response = await this.saveFavoritesRaw({ userFavoritesDto: userFavoritesDto });
        return await response.value();
    }

    /**
     * 设置公告
     */
    async setNoticeRaw(requestParameters: SetNoticeRequest): Promise<runtime.ApiResponse<NoticeVo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling setNotice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/notice`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoticeVoFromJSON(jsonValue));
    }

    /**
     * 设置公告
     */
    async setNotice(id: string): Promise<NoticeVo> {
        const response = await this.setNoticeRaw({ id: id });
        return await response.value();
    }

    /**
     * 设置服务开关
     */
    async setServiceSwitchRaw(requestParameters: SetServiceSwitchRequest): Promise<runtime.ApiResponse<SimpleDataVoBoolean>> {
        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling setServiceSwitch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.value !== undefined) {
            queryParameters['value'] = requestParameters.value;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/serviceSwitch`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleDataVoBooleanFromJSON(jsonValue));
    }

    /**
     * 设置服务开关
     */
    async setServiceSwitch(value: boolean): Promise<SimpleDataVoBoolean> {
        const response = await this.setServiceSwitchRaw({ value: value });
        return await response.value();
    }

    /**
     * 获取openid
     */
    async token2openidRaw(requestParameters: Token2openidRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling token2openid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/sso/openid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,

        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * 获取openid
     */
    async token2openid(authorization: string): Promise<string> {
        const response = await this.token2openidRaw({ authorization: authorization });
        return await response.value();
    }

    /**
     * 上传图片
     */
    async uploadShuttleImageRaw(requestParameters: UploadShuttleImageRequest): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/shuttle/uploadImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),

        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 上传图片
     */
    async uploadShuttleImage(inlineObject?: InlineObject): Promise<object> {
        const response = await this.uploadShuttleImageRaw({ inlineObject: inlineObject });
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetSearchWeekdayEnum {
    MON = 'MON',
    TUE = 'TUE',
    WED = 'WED',
    THU = 'THU',
    FRI = 'FRI',
    SAT = 'SAT',
    SUN = 'SUN'
}
/**
    * @export
    * @enum {string}
    */
export enum GetShuttleWeekdayEnum {
    MON = 'MON',
    TUE = 'TUE',
    WED = 'WED',
    THU = 'THU',
    FRI = 'FRI',
    SAT = 'SAT',
    SUN = 'SUN'
}
